# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from doublecloud.logs.v1 import log_service_pb2 as doublecloud_dot_logs_dot_v1_dot_log__service__pb2


class LogServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_stream(
                '/doublecloud.logs.v1.LogService/Read',
                request_serializer=doublecloud_dot_logs_dot_v1_dot_log__service__pb2.ReadLogsRequest.SerializeToString,
                response_deserializer=doublecloud_dot_logs_dot_v1_dot_log__service__pb2.ReadLogRecord.FromString,
                _registered_method=True)


class LogServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Read(self, request, context):
        """Read logs, every log record will be streamed as separate message. Also allows
        for 'tail -f' semantics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_stream_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=doublecloud_dot_logs_dot_v1_dot_log__service__pb2.ReadLogsRequest.FromString,
                    response_serializer=doublecloud_dot_logs_dot_v1_dot_log__service__pb2.ReadLogRecord.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'doublecloud.logs.v1.LogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('doublecloud.logs.v1.LogService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/doublecloud.logs.v1.LogService/Read',
            doublecloud_dot_logs_dot_v1_dot_log__service__pb2.ReadLogsRequest.SerializeToString,
            doublecloud_dot_logs_dot_v1_dot_log__service__pb2.ReadLogRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
